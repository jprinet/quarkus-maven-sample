package com.gradle;

import com.gradle.maven.extension.api.cache.BuildCacheApi;
import com.gradle.maven.extension.api.cache.MojoMetadataProvider;
import org.apache.maven.artifact.DependencyResolutionRequiredException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import static com.gradle.Utils.isNotEmpty;

/**
 * Caching instructions for the Quarkus build goal.
 */
final class QuarkusCachingConfig {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomGradleEnterpriseConfig.class);

    // Environment variable to disable caching
    private static final String GRADLE_QUARKUS_KEY_CACHE_ENABLED = "GRADLE_QUARKUS_CACHE_ENABLED";

    // Quarkus' properties used to configure application.
    // This file is generated by the Quarkus build goal.
    private static final String QUARKUS_PROPERTIES = ".quarkus/dump-config.properties";

    // Quarkus' current properties with a different value than in QUARKUS_PROPERTIES.
    // This file is generated by the Quarkus preparation goal.
    private static final String QUARKUS_PROPERTIES_DIFF = "target/quarkus-dump-config/diff.properties";
    private static final String QUARKUS_KEY_NATIVE_CONTAINER_BUILD = "quarkus.native.container-build";
    private static final String QUARKUS_KEY_NATIVE_BUILDER_IMAGE = "quarkus.native.builder-image";

    private static final String[] QUARKUS_KEYS_AS_FILE_INPUTS = new String[] {"quarkus.docker.dockerfile-native-path", "quarkus.docker.dockerfile-jvm-path", "quarkus.openshift.jvm-dockerfile", "quarkus.openshift.native-dockerfile"};

//    private static final String QUARKUS_KEY_PACKAGE_TYPE = "quarkus.package.type";
//    private static final String QUARKUS_VALUE_PACKAGE_NATIVE = "native";
//    private static final String QUARKUS_VALUE_PACKAGE_UBERJAR = "uber-jar";

    void configureQuarkusPluginCache(BuildCacheApi buildCache) {
        buildCache.registerMojoMetadataProvider(context -> {
            context.withPlugin("quarkus-maven-plugin", () -> {
                if(isQuarkusCacheEnabled() && "build".equals(context.getMojoExecution().getGoal())) {
                    LOGGER.info("Configuring caching for Quarkus build");
                    configureQuarkusBuildGoal(context);
                } else {
                    LOGGER.warn("Quarkus caching is disabled (gradle.quarkus.cache.enabled=false)");
                }
            });
        });
    }

    // Cache is enabled by default
    private boolean isQuarkusCacheEnabled() {
        return !Boolean.FALSE.toString().equals(System.getenv(GRADLE_QUARKUS_KEY_CACHE_ENABLED));
    }

    private void configureQuarkusBuildGoal(MojoMetadataProvider.Context context) {
        // Load Quarkus properties
        Properties quarkusProperties = loadQuarkusProperties();

        // Check required configuration
        if(isQuarkusBuildCacheable(quarkusProperties)) {
            configureInputs(context, quarkusProperties);
            configureOutputs(context, quarkusProperties);
        } else {
            LOGGER.info("Caching not supported for Quarkus goal");
        }
    }

    private Properties loadQuarkusProperties() {
        Properties quarkusProperties = new Properties();
        if(new File(QUARKUS_PROPERTIES).exists()) {
            try (InputStream input = new FileInputStream(QUARKUS_PROPERTIES)) {
                quarkusProperties.load(input);
            } catch (IOException e) {
                LOGGER.error("Error while loading " + QUARKUS_PROPERTIES, e);
            }
        }
        return quarkusProperties;
    }

    private boolean isQuarkusBuildCacheable(Properties quarkusProperties) {
        return isQuarkusDiffPropertiesEmpty()
            && isInContainerBuild(quarkusProperties)
            && isPackagingTypeSupported(quarkusProperties);
    }

    private boolean isQuarkusDiffPropertiesEmpty() {
        return new File(QUARKUS_PROPERTIES_DIFF).length() == 0;
    }

    private boolean isInContainerBuild(Properties quarkusProperties) {
        boolean isContainerBuild = Boolean.parseBoolean(quarkusProperties.getProperty(QUARKUS_KEY_NATIVE_CONTAINER_BUILD));
        String builderImage = quarkusProperties.getProperty(QUARKUS_KEY_NATIVE_BUILDER_IMAGE);

        return isContainerBuild && isNotEmpty(builderImage);
    }

    private boolean isPackagingTypeSupported(Properties quarkusProperties) {
//        String packageType = quarkusProperties.getProperty(QUARKUS_KEY_PACKAGE_TYPE);
//        return QUARKUS_VALUE_PACKAGE_NATIVE.equals(packageType) || QUARKUS_VALUE_PACKAGE_UBERJAR.contains(packageType);
        // TBC: No filter on package type is required
        return true;
    }

    private void configureInputs(MojoMetadataProvider.Context context, Properties quarkusProperties) {
        context.inputs(inputs -> {
            addOsInputs(inputs);
            addClasspathInput(context, inputs);
            addMojoInputs(inputs);
            addQuarkusPropertiesInput(inputs);
            addQuarkusFilesInputs(inputs, quarkusProperties);
        });
    }

    private void addOsInputs(MojoMetadataProvider.Context.Inputs inputs) {
        inputs.property("osName", System.getProperty("os.name"))
            .property("osVersion", System.getProperty("os.version"))
            .property("osArch", System.getProperty("os.arch"));
    }

    private void addClasspathInput(MojoMetadataProvider.Context context, MojoMetadataProvider.Context.Inputs inputs) {
        try {
            List<String> compileClasspathElements = context.getProject().getCompileClasspathElements();
            inputs.fileSet("quarkusCompileClasspath", compileClasspathElements, fileSet -> fileSet.normalizationStrategy(MojoMetadataProvider.Context.FileSet.NormalizationStrategy.CLASSPATH));
        } catch (DependencyResolutionRequiredException e) {
            throw new IllegalStateException("Classpath can't be resolved");
        }
    }

    private void addMojoInputs(MojoMetadataProvider.Context.Inputs inputs) {
        inputs
            .fileSet("generatedSourcesDirectory", fileSet -> {})
            .properties("appArtifact", "closeBootstrappedApp", "finalName", "ignoredEntries", "manifestEntries", "manifestSections", "skip", "skipOriginalJarRename", "systemProperties", "properties")
            .ignore("project", "buildDir", "mojoExecution", "session", "repoSession", "repos", "pluginRepos");
    }

    private void addQuarkusPropertiesInput(MojoMetadataProvider.Context.Inputs inputs) {
        inputs.fileSet("quarkusProperties", new File(QUARKUS_PROPERTIES), fileSet -> fileSet.normalizationStrategy(MojoMetadataProvider.Context.FileSet.NormalizationStrategy.RELATIVE_PATH));
        inputs.fileSet("generatedSourcesDirectory", fileSet -> {});
    }

    private void addQuarkusFilesInputs(MojoMetadataProvider.Context.Inputs inputs, Properties quarkusProperties) {
        for(String quarkusFilePropertyKey : QUARKUS_KEYS_AS_FILE_INPUTS) {
            String quarkusFilePropertyValue = quarkusProperties.getProperty(quarkusFilePropertyKey);
            if(!quarkusFilePropertyValue.isEmpty()) {
                inputs.fileSet(quarkusFilePropertyKey, new File(quarkusFilePropertyValue), fileSet -> fileSet.normalizationStrategy(MojoMetadataProvider.Context.FileSet.NormalizationStrategy.RELATIVE_PATH));
            }
        }
    }

    private void configureOutputs(MojoMetadataProvider.Context context, Properties quarkusProperties) {
        context.outputs(outputs -> {
            String quarkusExeFileName = "target/" + context.getProject().getBuild().getFinalName() + "-runner";
            String quarkusJarFileName = "target/" + context.getProject().getBuild().getFinalName() + "-runner.jar";
            LOGGER.info("cache output = " + quarkusExeFileName);

            outputs.cacheable("this plugin has CPU-bound goals with well-defined inputs and outputs");
            outputs.file("quarkusExe", quarkusExeFileName);
            outputs.file("quarkusJar", quarkusJarFileName);
            outputs.file("quarkusProperties", QUARKUS_PROPERTIES);
        });
    }
}
